[
  {
    "title": "Algorithmic Trading Bot",
    "summary": "Trading system using quantitative analysis and machine learning",
    "description": "Engineered features with TA-Lib and scipy for quantitative data, NLTK and spaCy for sentiment analysis. Developed trading strategies on QuantConnect with scikit-learn and XGBoost for performance improvement.",
    "tags": ["Python", "C#", "Quantitative Finance", "Machine Learning"],
    "github": null,
    "live": null,
    "image": "/logos/quantconnect.png"
  },
  {
    "title": "Tennis Match Prediction",
    "summary": "Data engineering pipeline for ATP Tour tennis match prediction",
    "description": "Developed vectorized and event-driven backtesting frameworks for tennis matches and odds. Asynchronously scraped data with playwright and reverse-engineered tennis websites to optimize bandwidth usage.",
    "tags": ["Python", "Data Engineering", "Web Scraping", "Playwright"],
    "github": null,
    "live": null,
    "image": "/logos/atptour.png"
  },
  {
    "title": "Social Media Question-Answering",
    "summary": "Search and question-answering system for social media content",
    "description": "Engineered database of social media content across Twitter and Youtube, enabling advanced search and question-answering. Implemented transcription with OpenAI Whisper and topic modeling with BERTopic to extract key themes across influencers. Created an interactive graph of thematic relationships between content using D3.js.",
    "tags": ["Large Language Models", "Topic Modeling", "Question-Answering", "D3.js"],
    "github": null,
    "live": null,
    "image": "/logos/obsidian.png"
  },
  {
    "title": "FASTER",
    "summary": "Feature Automation, Selection, Transformation, Extraction Routine",
    "description": "Automated an ETL pipeline with OpenRouter API for integrating LLM domain knowledge into the AutoML paradigm. Validated performance of generated features using XGBoost and scikit-learn models across 3 benchmark datasets.",
    "tags": ["Python", "Large Language Models", "AutoML", "ETL"],
    "github": "https://github.com/CarterT27/FASTER",
    "live": null,
    "image": "/logos/automl.png"
  },
  {
    "title": "txtTutor",
    "summary": "Document question-answering application with LLM integration",
    "description": "Developed a RAG-based application using OpenAI APIs and custom vector search database. Utilized Heroku for hosting, deployment, and scaling to support 100+ monthly users.",
    "tags": ["Python", "Large Language Models", "RAG", "Heroku"],
    "github": null,
    "live": null,
    "image": "/logos/txtTutor.svg",
    "imageScale": 1
  },
  {
    "title": "AI Health Insights",
    "summary": "Health data analysis and insight generation platform",
    "description": "Utilized dask to process and analyze millions of rows of Apple Watch health data, identifying key underperforming metrics. Developed health insight generation pipelines leveraging Claude and fine-tuned HuggingFace Large Language Models. Developed an interactive dashboard using plotly/dash to visualize trends, insights, and actionable recommendations. Hosted web server using Cloudflare tunnels.",
    "tags": ["Python", "Natural Language Processing", "Big Data", "Dask", "Plotly"],
    "github": "https://github.com/CarterT27/Apple-Watch-Personalized-Health-Insights",
    "live": null,
    "image": "/logos/applehealth.png"
  },
  {
    "title": "Personal Portfolio",
    "summary": "This website! Built with Next.js and featuring pixel art animations",
    "description": "Designed and implemented a personal portfolio site with Next.js, featuring a custom pixel art avatar that changes based on scroll position.",
    "tags": ["Next.js", "TypeScript", "Pixi.js"],
    "github": "https://github.com/CarterT27/portfolio",
    "live": null,
    "image": "/logos/nextjs.png"
  },
  {
    "title": "Placeholder",
    "summary": "Placeholder",
    "description": "Placeholder",
    "tags": ["Placeholder"],
    "github": null,
    "live": null,
    "image": "/logos/placeholder.png"
  },
  {
    "title": "Placeholder",
    "summary": "Placeholder",
    "description": "Placeholder",
    "tags": ["Placeholder"],
    "github": null,
    "live": null,
    "image": "/logos/placeholder.png"
  },
  {
    "title": "Placeholder",
    "summary": "Placeholder",
    "description": "Placeholder",
    "tags": ["Placeholder"],
    "github": null,
    "live": null,
    "image": "/logos/placeholder.png"
  },
  {
    "title": "Placeholder",
    "summary": "Placeholder",
    "description": "Placeholder",
    "tags": ["Placeholder"],
    "github": null,
    "live": null,
    "image": "/logos/placeholder.png"
  },
  {
    "title": "Placeholder",
    "summary": "Placeholder",
    "description": "Placeholder",
    "tags": ["Placeholder"],
    "github": null,
    "live": null,
    "image": "/logos/placeholder.png"
  }
] 